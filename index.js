// creating todo application http server
const express = require("express");
const app = express();
let autoGeneratedID = 0;
const storage = [];
const port = 3000;

app.use(express.json()); // middleware function (because of the app.use) no route specified => will be called for every request coming to the http server / matches with every route coming from the client. 
// 2.if the client does not send valid JSON object than it will throw error, if the client sends no body then its ok (will be parsed to {} -> empty object) but should not send any random zibrish

app.get("/todos", function (req, res) {
    console.log(req.body);
    res.status(200).json(storage);
})

// returning the todo based on the id (that will be send using the route parameters)
app.get("/todos/:id", function(req, res) {
    // checking if the id contains only numbers as string
    const id = req.params.id;
    if(!isOnlyNumbers(id) || !storage.length){
        res.status(404).send("Not Found")
        return;
    }

    const todo = storage.find(t => t.id == id); // here we will be checking string number with number hence using loose equality
    
    if(!todo) {
        res.status(404).send("Not Found")
        return
    }

    res.status(200).json(todo);
})

app.post("/todos", function (req, res) {
    const todo = req.body;

    try {
        if(!todo || !Object.keys(todo).length) {
            const error =  new Error("Pass a valid todo inputs"); // will be passed as message
            error.statusCode = 411
            throw error
        }

        if(!todo.title || !todo.description) {
            const error = new Error("Pass a valid todo inputs");
            error.statusCode = 411;
            throw error
        }

        // all validated => adding the todo in the storage
        todo.id = autoGeneratedID;
        todo.completed = false;
        autoGeneratedID++;

        storage.push(todo);

        res.status(201).json({
            id: todo.id
        })
    } catch(err) {
        // 411 is used for the invalid inputs send from client / frontend
        res.status(err.statusCode).json({
            msg: err.message
        })
    }
})

// route-handler for updating the todo with the route params
app.put("/todos/:id", function(req, res) {
    const id = req.params.id
    // we will always get id as a defined variable value because then only it maps with the route-handler, only will check if contains number as a string
    try {
        const todo = req.body;

        if(!todo || !Object.keys(todo).length) {
            const err = new Error("Invalid Inputs")
            err.statusCode = 411;
            throw err;
        }

        if(!storage.length) {
            // the Error class is used to create error object, with properties as error.message, error.stack (stack trace), error.name
            const err = new Error("Not Found")
            err.statusCode = 404
            throw err
        }

        if(!isOnlyNumbers(id)) {
            const err = new Error("Provide valid id");
            err.statusCode = 411;
            throw err;
        }


        const replaceTodoIndex = storage.findIndex( t => t.id == id ); // will return -1 if not found

        if(replaceTodoIndex < 0) {
            const err = new Error("Not Found");
            err.statusCode = 404
            throw err;
        }

        todo.id = storage[replaceTodoIndex].id

        storage[replaceTodoIndex] = todo

        res.status(200).send("found and updated")

    } catch(err) {
        res.status(err.statusCode).send(err.message);
    }
})

app.delete("/delete/:id", function(req, res) {
    const id = req.params.id;

    try {
        if(!storage.length) {
            const err = new Error("Not Found");
            err.statusCode = 404;
            throw err;
        }

        if(!isOnlyNumbers(id)) {
            const err = new Error("Pass valid Id");
            err.statusCode = 411; // this statusCode represent wrong inputs are send to the server
            throw err;
        }

        const deleteTodoIndex = storage.findIndex(t => t.id === id);

        if(deleteTodoIndex < 0) {
            const err = new Error("Not Found");
            err.statusCode = 404;
            throw err;
        }

        // splice manupulates the original array 
        storage.splice(deleteTodoIndex, 1); 

        res.status(200).send("found and deleted");

    } catch (error) {
        res.status(error.statusCode).send(error.message);
    }
})


// if no route matching with the above routes send from the client => this will match because it does not have any route, if the middleware does not specify the route for which it want to called it will get matched with every route (catch remember) 
app.use(function (req, res) {
    res.status(404).send("Route not found")
})

function isOnlyNumbers(str) {
  return /^\d+$/.test(str);
}

app.listen(port);

// route params(:) are fetched using req.params.variableName that is used in the route
// query params(?, &) are fetched using req.query.variableName that is send by the client in the url 