const express = require("express");
const fs = require("fs");
const app = express();
const path = require("path");
let autoGeneratedID = 0;

const storagePath = path.join(__dirname, "todos.json"); // will be storing the todos in json format => have to read and write in the json file

app.use(express.json()) // body-parser so that we can get user data in body, header

function readFilePromise(finalPath) {
    return new Promise(function(resolve, reject) {
        fs.readFile(finalPath, function(err, data) {
            if(err) {
                reject({
                    statusCode: 500,
                    err,
                    message: "Something went wrong. Internal Server error"
                });
                return
            }

            // read file in json format => has to convert into valid JS object
            const response = JSON.parse(data);
            resolve(response);
        })
    })
}

function writeFilePromise(finalPath, data) {
    // data will be in json format
    // by default writeFile method overrides the file and append new data, if we does not want that either use fs.appendFile or writeFile with flag: "a".
    return new Promise(function(resolve, reject) {
        fs.writeFile(finalPath, data, {
            encoding: "utf-8",
            // flag: "a" -> we will not use this
        }, function(err) {
            if(err) {
                reject({
                    statusCode: 500,
                    err,
                    message: "Something went wrong. Internal Server error"
                });

                // we can here to use the error class but for simplicity I have used this
                return
            }

            resolve({
                isWritten: true,
                msg: "Data added to the file"
            })
        })
    })
}

function isOnlyNumbers(str) {
  return /^\d+$/.test(str);
}

app.get("/todos", async function(req, res) {
    try {
        // read todo from the file
        const data = await readFilePromise(storagePath);
        console.log(data);

        res.status(200).json(data);
    } catch (error) {
        res.status(error.statusCode).send(error.message)
    }
})

app.get("/todos/:id", async function(req, res) {
    const id = req.params.id;
    const err = new Error();

    try {
        if(!isOnlyNumbers(id)) {
            err.message = "Invalid id as input"
            err.statusCode = 411
            throw err;
        }

        // readFile to get all the todos
        const allTodos = await readFilePromise(storagePath);
        const result = allTodos.find(t => t.id == id);

        if(!result) {
            err.statusCode = 404;
            err.message = "Todo not Found"
            throw err;
        }

        res.status(200).json(result);

    } catch (error) {
        res.status(error.statusCode).send(error.message);
    }
})

app.post("/todos", async function(req, res) {
    const err = new Error(); // do not create globally because it will not be able to track the stack trace for the error, else where error occur create a error object

    try {
        const todo = req.body;

        // considering todo contains title, description as base properties
        if(!todo || Object.keys(todo).length !== 2) {
            const error = new Error("Invalid Inputs for todos");
            error.statusCode = 411;
            throw error;
        }

        // readFile
        const data = await readFilePromise(storagePath);
        todo.id = autoGeneratedID;
        todo.completed = false;
        autoGeneratedID++;
        data.push(todo);
        console.log(data);

        // writeFile
        // convert the data in JSON format
        const response = await writeFilePromise(storagePath, JSON.stringify(data));
        console.log(response);

        res.status(200).json({
            id: todo["id"],
        })
    } catch (error) {
        res.status(error.statusCode).send(error.message)
    }

})

app.put("/todos/:id", async function(req, res) {
    const id = req.params.id;
    const updatedTodo = req.body;

    try {
        if(!isOnlyNumbers(id)) {
            const error = new Error("Invalid inputs");
            err.statusCode = 411;
            throw error;
        }

        if(!updatedTodo) {
            const error = new Error("Invalid inputs");
            err.statusCode = 411;
            throw error;
        }

        // if we does not get title, description, or completed we will set the default value
        const allTodos = await readFilePromise(storagePath);
        const replaceTodoIndex = allTodos.findIndex(t => t.id == id);

        if(replaceTodoIndex < 0) {
            const error = new Error("Todo not Found");
            error.statusCode = 404
            throw error
        }

        allTodos[replaceTodoIndex].title = todo.title ? todo.title : allTodos[replaceTodoIndex].title,
        allTodos[replaceTodoIndex].description = todo.description ? todo.description : allTodos[replaceTodoIndex].description
        allTodos[replaceTodoIndex].completed = todo.completed ? todo.completed : allTodos[replaceTodoIndex].completed;

        // write the latest todo to the file
        const response = await writeFilePromise(storagePath, JSON.stringify(allTodos));
        console.log(response);

        res.status(200).send("Todo Updated")
    } catch (error) {
        res.status(error.statusCode).send(error.message);
    }

})

app.delete("/todos/:id", async function(req, res) {
    const id = req.params.id

    try {
        if(!isOnlyNumbers(id)) {
            const error = new Error("Invalid Id as inputs");
            err.statusCode = 411;
            throw error;
        }
        
        const allTodos = await readFilePromise(storagePath);

        const deleteTodoIndex = allTodos.findIndex(t => t.id == id);

        // will be using splice
        allTodos.splice(deleteTodoIndex, 1);

        const response = await writeFilePromise(storagePath, allTodos);

        res.status(200).send("Deleted Todo");
    } catch (error) {
        res.status(error.statusCode).send(error.message);
    }
})





// Route-handler if the client route does not match with the above routes
app.use(function (req, res) {
    res.status(404).send("Route not Found")
})

app.listen(3000)